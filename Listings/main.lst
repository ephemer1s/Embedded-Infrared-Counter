C51 COMPILER V9.54   MAIN                                                                  10/09/2020 01:05:00 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\Keil\Keil C51 v9.54\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OB
                    -JECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <stdio.h>
   2          #include <string.h>
   3          #include <stdlib.h>
   4          #include "reg52.h"
   5          
   6          #include "lcd.h"
   7          #include "ir.h"
   8          #include "x5045.h"
   9          #include "init.h"
  10          
  11          /* variable implemetation */
  12          int cnt0, cnt1;
  13          int maxnum, maxtime;
  14          int curtime;
  15          int key_phase;
  16          char strbuf[32];
  17          sbit buzzer = P1^5;
  18          
  19          void LCD_refresh()
  20          {
  21   1          char* str = strbuf;
  22   1          // reset led
  23   1          led4 = 1;
  24   1          led5 = 1;
  25   1          led6 = 1;
  26   1          led7 = 1;
  27   1          switch(key_phase){
  28   2              case 0: { // display current enter / exit
  29   3                  led4 = 0;
  30   3                  sprintf(str, "Total Entry:%3d Total Exit :%3d", cnt0, cnt1);
  31   3                  break;
  32   3              }
  33   2              case 1: { // display current time / max time
  34   3                  led5 = 0;
  35   3                  sprintf(str, "Time Used  :%3d Max: %8d", curtime, maxtime);
  36   3                  break;
  37   3              }
  38   2              case 2: { // display current enter number / valve
  39   3                  led6 = 0;
  40   3                  sprintf(str, "Total Entry:%3d Max: %8d", cnt0, maxnum);
  41   3                  break;
  42   3              }
  43   2              case 3: { // display current exit number / valve
  44   3                  led7 = 0;
  45   3                  sprintf(str, "Total Exit :%3d Max: %8d", cnt1, maxnum);
  46   3                  break;
  47   3              }
  48   2              default:break;
  49   2              }
  50   1          LCD_display(str);
  51   1      }
  52          
  53          
  54          void main(){
C51 COMPILER V9.54   MAIN                                                                  10/09/2020 01:05:00 PAGE 2   

  55   1          bit tmp0 = 1, tmp1 = 1;
  56   1        char tcnt = 0, a = 0, b = 0;
  57   1          int i;
  58   1      
  59   1        /* pin init */
  60   1        led0 = 1;
  61   1        led1 = 1;
  62   1        led2 = 1;
  63   1        led3 = 1;
  64   1        buzzer = 1;
  65   1      
  66   1        /* module init */
  67   1        WriteSR(0x12);      //设定看门狗超时周期为600ms，不保护
  68   1          delaynms(10);       //延时10ms
  69   1      
  70   1        SWR = 1;
  71   1        
  72   1        LcdInit();
  73   1        TimeInit();
  74   1        Int0Init();
  75   1        UartInit();
  76   1      
  77   1          /* data init */
  78   1          delaynms(10);
  79   1          a = ReadSet(0x10);
  80   1          delaynms(10);
  81   1          b = ReadSet(0x11);
  82   1          maxtime = (int)a;
  83   1          maxnum = (int)b;
  84   1          curtime = 0;
  85   1          cnt0 = 0;
  86   1          cnt1 = 0;
  87   1          key_phase = 0;
  88   1      
  89   1          LCD_refresh();
  90   1          for(i = 0; i < 32; i++){
  91   2              strbuf[i] = 0;
  92   2          }
  93   1          
  94   1          while(1){
  95   2              delaynms(10);
  96   2              a = ReadSet(0x10);
  97   2              delaynms(10);
  98   2              b = ReadSet(0x11);
  99   2              maxtime = (int)a;
 100   2              maxnum = (int)b;
 101   2              if(curtime < maxtime){
 102   3                  /* alert trigger */
 103   3                  if(cnt0 > maxnum && led2){
 104   4                      led2 = 0;
 105   4                      buzzer = 0;
 106   4                  }
 107   3                  if(cnt1 > maxnum && led3){
 108   4                      led2 = 0;
 109   4                      buzzer = 0;
 110   4                  }
 111   3                  
 112   3                  /* detect phase */
 113   3                  if(led0 && led1){  // receive 1st sensor
 114   4                      if(IsNegedge(ir0,tmp0)){
 115   5                          led0 = 0;
 116   5                      }
C51 COMPILER V9.54   MAIN                                                                  10/09/2020 01:05:00 PAGE 3   

 117   4                      else if(IsNegedge(ir1,tmp1)){
 118   5                          led1 = 0;
 119   5                      }
 120   4                  }
 121   3                  else if(!led0 && led1){  // receive 2nd
 122   4                      if(IsPosedge(ir1,tmp1)){
 123   5                          led0 = 1;
 124   5                          cnt0++;
 125   5                          send_char_com(0x30);
 126   5                      }
 127   4                  }
 128   3                  else if(led0 && !led1){  // receive 2nd
 129   4                      if(IsPosedge(ir0,tmp0)){
 130   5                          led1 = 1;
 131   5                          cnt1++;
 132   5                          send_char_com(0x31);
 133   5                      }
 134   4                  }
 135   3                  tmp0 = ir0;  // save status
 136   3                  tmp1 = ir1;
 137   3              }
 138   2                  
 139   2          /* LCD disp */
 140   2          if (TF0 == 1){          // if timer0 overflow             
 141   3                  TF0 = 0;                // clear timer int
 142   3                  TH0 = TimeTH0;          // reinit             
 143   3                  TL0 = TimeTL0;          //   
 144   3                  tcnt++;                 // tcnt 100
 145   3                  if (tcnt/100)        // timer reach 1000ms
 146   3                  {
 147   4                      tcnt%=100;
 148   4                      if(curtime < maxtime)
 149   4                          curtime++;
 150   4                      led3 = ~(led3);     // led-timer blink
 151   4                      LCD_refresh();
 152   4            }
 153   3              }
 154   2          }
 155   1      }
 156          /*按键中断*/
 157          void key_int0() interrupt 0
 158          {
 159   1          int i = 0;
 160   1          char* str = strbuf;
 161   1          EX0 = 0;
 162   1          EX1 = 0;
 163   1        if(key1 == 0)
 164   1        {
 165   2              /* clear screen and buffer */
 166   2          LcdWriteCom(0x01);  // clear screen
 167   2              // while(i < strlen(str))
 168   2              //     strbuf[i] = 0; // clear buffer
 169   2              memset(strbuf, 0, sizeof(char) * 32);
 170   2              /* clear data */
 171   2              cnt0 = 0;
 172   2              cnt1 = 0;
 173   2              delaynms(10);
 174   2              key_phase = 0;
 175   2        }
 176   1          EX0 = 1;
 177   1          EX1 = 1;
 178   1      }
C51 COMPILER V9.54   MAIN                                                                  10/09/2020 01:05:00 PAGE 4   

 179          
 180          void key_int2() interrupt 2
 181          {
 182   1          char* str = strbuf;
 183   1          int i;
 184   1        EX0 = 0;
 185   1          EX1 = 0;
 186   1        if(key2 == 0)
 187   1        {
 188   2              // while(i <= 32)
 189   2              //     strbuf[i] = 0; // clear buffer
 190   2              memset(strbuf, 0, sizeof(char) * 32);
 191   2              LcdWriteCom(0x01);
 192   2              delaynms(10);
 193   2              LCD_refresh();
 194   2              /* save operation */
 195   2              key_phase++;
 196   2          key_phase %= 4;
 197   2        }
 198   1          EX0 = 1;
 199   1          EX1 = 1;
 200   1      }
*** WARNING C280 IN LINE 183 OF main.c: 'i': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1020    ----
   CONSTANT SIZE    =    107    ----
   XDATA SIZE       =     44      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
